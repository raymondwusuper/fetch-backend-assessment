1. Why did you choose the tools, libraries, and language you used for the coding exercise?

I chose Python as the programming language because it has robust libraries for building APIs and is known for simplicity and readability. 
For the web framework, I used FastAPI because it provides an intuitive way to create APIs, has excellent performance (comparable to Node.js and Go), and natively supports asynchronous request handling, which improves scalability. 
Furthermore, among other popular Python modules like Flask or DJango DRF, FastAPI is much simpler and lightweight compared to DJango, and also provides a lot more functionalities compared to Flask. Most
notably, FastAPI is both asynchronous by default and autogenerates OpenAPI and Swagger UI, which allows for easy and legible testing. It is far more scalable for smaller-scale API projects like the one requested by Fetch as a backend assessment.
Additionally, FastAPI is well-integrated with Pydantic for data validation and automatic generation of OpenAPI documentation. 
Uvicorn was selected as the ASGI server due to its speed and ability to handle asynchronous IO operations efficiently.

2. What are the advantages and disadvantages of your solution?

Advantages:
- Simplicity and Readability: FastAPI and Python are easy to write and understand, making it easier to maintain and extend the code.
- Automatic Validation: Pydantic automatically handles request data validation and type enforcement, reducing boilerplate code and preventing potential bugs.
- OpenAPI Documentation: FastAPI automatically generates interactive API documentation, which is helpful for development and testing.
- Having sorted in spend can lay the foundation for future improvements
- Handles many edge cases, most notably multiple calls to spend.

Disadvantages:
- Scalability: Although FastAPI is performant, Python's single-threaded nature may limit scalability compared to multi-threaded environments like Node.js or Java for CPU-bound tasks.
- Can possibly use heap sorting by time to make push and pop operations faster, rather than sorting every time spend is called.

3. What has been a favorite school/personal project thus far? What about it that challenged you?

One of my favorite personal projects has been building a roguelike RPG game from scratch using Python. It was challenging because I had to handle complex game mechanics 
such as procedural dungeon generation, dynamic field of view (FOV), and turn-based logic. Additionally, implementing efficient pathfinding and managing the state of the game
across different levels without consuming too much memory was difficult but rewarding. The project pushed me to improve my algorithms and game design skills while also 
requiring optimization for performance.
Link to the game's repository: https://github.com/raymondwusuper/dungeon-game
